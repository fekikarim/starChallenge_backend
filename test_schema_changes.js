const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Mod√®les
const Critere = require('./models/Critere');
const Participant = require('./models/Participant');
const Performance = require('./models/Performance');

console.log('üß™ Test des changements de sch√©ma de base de donn√©es\n');

async function testCritereModel() {
    console.log('üìã Test du mod√®le Critere avec le champ "type"...');
    
    try {
        // Test de cr√©ation d'un crit√®re avec type
        const testCritere = new Critere(
            'TEST_CRIT_001',
            'Crit√®re de test',
            10.5,
            'TEST_CHALLENGE_001',
            'quantitatif'
        );
        
        console.log('‚úÖ Cr√©ation d\'un crit√®re avec type:', testCritere);
        
        // Test d'ajout en base (simulation)
        console.log('   - ID:', testCritere.id);
        console.log('   - Nom:', testCritere.nom);
        console.log('   - Poids:', testCritere.poids);
        console.log('   - Challenge ID:', testCritere.challengeId);
        console.log('   - Type:', testCritere.type);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors du test du mod√®le Critere:', error.message);
        return false;
    }
}

async function testParticipantModel() {
    console.log('\nüë§ Test du mod√®le Participant avec le champ "isValidated"...');
    
    try {
        // Test de cr√©ation d'un participant avec isValidated
        const testParticipant = new Participant(
            'TEST_PART_001',
            'TEST_USER_001',
            'TEST_CHALLENGE_001',
            85.5,
            'validated'
        );
        
        console.log('‚úÖ Cr√©ation d\'un participant avec statut de validation:', testParticipant);
        
        console.log('   - ID:', testParticipant.id);
        console.log('   - Utilisateur ID:', testParticipant.utilisateurId);
        console.log('   - Challenge ID:', testParticipant.challengeId);
        console.log('   - Score Total:', testParticipant.scoreTotal);
        console.log('   - Statut de validation:', testParticipant.isValidated);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors du test du mod√®le Participant:', error.message);
        return false;
    }
}

async function testPerformanceModel() {
    console.log('\nüèÜ Test du mod√®le Performance avec le champ "critereId"...');
    
    try {
        // Test de cr√©ation d'une performance avec critereId
        const testPerformance = new Performance(
            'TEST_PERF_001',
            'TEST_PART_001',
            92.5,
            1,
            JSON.stringify({ details: 'Performance excellente' }),
            'TEST_CRIT_001'
        );
        
        console.log('‚úÖ Cr√©ation d\'une performance avec critereId:', testPerformance);
        
        console.log('   - ID:', testPerformance.id);
        console.log('   - Participant ID:', testPerformance.participantId);
        console.log('   - Valeur:', testPerformance.valeur);
        console.log('   - Rang:', testPerformance.rang);
        console.log('   - D√©tails:', testPerformance.details);
        console.log('   - Crit√®re ID:', testPerformance.critereId);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors du test du mod√®le Performance:', error.message);
        return false;
    }
}

async function testDatabaseSchema() {
    console.log('\nüóÑÔ∏è  Test de la structure de la base de donn√©es...');
    
    return new Promise((resolve) => {
        const db = new sqlite3.Database('./database/starchallenge.db');
        
        // V√©rifier la structure de la table Critere
        db.get("PRAGMA table_info(Critere)", (err, row) => {
            if (err) {
                console.error('‚ùå Erreur lors de la v√©rification de la table Critere:', err.message);
                resolve(false);
                return;
            }
            
            // V√©rifier que la colonne type existe
            db.all("PRAGMA table_info(Critere)", (err, rows) => {
                if (err) {
                    console.error('‚ùå Erreur:', err.message);
                    resolve(false);
                    return;
                }
                
                const hasTypeColumn = rows.some(row => row.name === 'type');
                console.log('‚úÖ Colonne "type" dans Critere:', hasTypeColumn ? 'Pr√©sente' : 'Absente');
                
                // V√©rifier la table Participant
                db.all("PRAGMA table_info(Participant)", (err, rows) => {
                    if (err) {
                        console.error('‚ùå Erreur:', err.message);
                        resolve(false);
                        return;
                    }
                    
                    const hasIsValidatedColumn = rows.some(row => row.name === 'isValidated');
                    console.log('‚úÖ Colonne "isValidated" dans Participant:', hasIsValidatedColumn ? 'Pr√©sente' : 'Absente');
                    
                    // V√©rifier la table Performance
                    db.all("PRAGMA table_info(Performance)", (err, rows) => {
                        if (err) {
                            console.error('‚ùå Erreur:', err.message);
                            resolve(false);
                            return;
                        }
                        
                        const hasCritereIdColumn = rows.some(row => row.name === 'critereId');
                        console.log('‚úÖ Colonne "critereId" dans Performance:', hasCritereIdColumn ? 'Pr√©sente' : 'Absente');
                        
                        db.close();
                        resolve(hasTypeColumn && hasIsValidatedColumn && hasCritereIdColumn);
                    });
                });
            });
        });
    });
}

async function runTests() {
    console.log('üöÄ D√©marrage des tests...\n');
    
    const results = [];
    
    // Test des mod√®les
    results.push(await testCritereModel());
    results.push(await testParticipantModel());
    results.push(await testPerformanceModel());
    
    // Test de la base de donn√©es
    results.push(await testDatabaseSchema());
    
    // R√©sum√©
    console.log('\nüìä R√©sum√© des tests:');
    const passedTests = results.filter(result => result === true).length;
    const totalTests = results.length;
    
    console.log(`‚úÖ Tests r√©ussis: ${passedTests}/${totalTests}`);
    
    if (passedTests === totalTests) {
        console.log('üéâ Tous les tests sont pass√©s avec succ√®s !');
        console.log('\n‚ú® Les changements de sch√©ma ont √©t√© appliqu√©s correctement:');
        console.log('   - Critere.type: Champ ajout√© pour le type de crit√®re');
        console.log('   - Participant.isValidated: Champ ajout√© pour le statut de validation');
        console.log('   - Performance.critereId: Champ ajout√© pour la r√©f√©rence au crit√®re');
    } else {
        console.log('‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.');
    }
}

// Ex√©cuter les tests
runTests().catch(console.error);
